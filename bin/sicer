#!/usr/bin/env python3
#Developed by Zang Lab at University of Virginia - 2018

import os
import sys
curr_path = os.getcwd()
import subprocess

import argparse
from argparse import RawTextHelpFormatter

#Imports from SICER package
from sicer.main import run_SICER
from sicer.main import run_RECOGNICER
from sicer.lib import Utility, GenomeData

def sub_arg_SICER (sub_parser):
	'''If subcommand is "SICER", parse these following arguments.'''

	parser = sub_parser.add_parser("SICER", help="Enter arguments for SICER algorithm")
	parser.add_argument(
	    '--treatment_file',
	    '-t',
	    required=True,
	    type=str,
	    help='''Name of the sample file you wish to run SICER on. Must be in BED or BAM format.'''
	    )

	parser.add_argument(
	    '--control_file',
	    '-c',
	    required=False,
	    type=str,
	    help='''Name of the control library in BED or BAM format. \nIf you wish to run SICER without a control library, simply do not enter the file. '''
	    )

	parser.add_argument(
		'--species',
		'-s',
		required=True,
		type=str,
		help='The species/genome used (ex: hg38)'
		)

	parser.add_argument(
		'--redundancy_threshold',
		'-rt',
		required=False,
		type=int,
		default=1,
		help='The number of copies of indentical reads allowed in a library.\nDefault value is 1'
		)

	parser.add_argument(
		'--window_size',
		'-w',
		required=False,
		type=int,
		default=200,
		help='Resolution of SICER.\nDefault value is 200 (bp)'
	)
	parser.add_argument(
		'--fragment_size',
		'-f',
		required=False,
		type=int,
		default=150,
		help='The amount of shift from the beginning of a read to the center of the DNA fragment represented by the read.\nDefault value is 150 (bp).'
		)

	parser.add_argument(
		'--effective_genome_fraction',
		'-egf',
		required=False,
		type=float,
		default=0.74,
		help='Effective genome as fraction of the genome size.\nDefault value is 0.74'
		)

	parser.add_argument(
	    '--false_discovery_rate',
	    '-fdr',
	    required=False,
	    default=0.01,
	    type=float,
	    help='''Remove all islands with an false_discovery_rate below cutoff.\nDefault value is 0.01.'''
	    )

	parser.add_argument(
		'--input_directory',
		'-i',
		required=False,
		default=curr_path,
		type=str,
		help='Path of the directory in which input files are located in. Not required when running SICER in the same directory as input files'
		)

	parser.add_argument(
		'--output_directory',
		'-o',
		required=False,
		default=curr_path,
		type=str,
		help='Path of the directory in which results will be stored.\nDefault path is the current path'
		)

	parser.add_argument(
		'--gap_size',
		'-g',
		required=False,
		type=int,
		default=600,
		help='The minimum length of a \"gap\" such that neighboring window is an \"island.\"\nThis value must be a multiple of the window size.\nDefault value is 600 (bp)'''
		)
	parser.add_argument(
		'--e_value',
		'-e',
		required=False,
		type=int,
		default=1000,
		help='E-value. Requires user input when no control library is provided.\nDefault value is 1000'
		)


def sub_arg_RECOGNICER (sub_parser):
	'''If subcommand is "RECOGNICER", parse these following arguments.'''

	parser = sub_parser.add_parser("RECOGNICER", help="Enter arguments for RECOGNICER algorithm")
	parser.add_argument(
	    '--treatment_file',
	    '-t',
	    required=True,
	    type=str,
	    help='''Name of the sample file you wish to run RECOGNICER on. Must be in BED or BAM format.'''
	    )

	parser.add_argument(
	    '--control_file',
	    '-c',
	    required=False,
	    type=str,
	    help='''Name of the control library in BED or BAM format. \nIf you wish to run RECOGNICERS without a control library, simply do not enter the file. '''
	    )

	parser.add_argument(
		'--species',
		'-s',
		required=True,
		type=str,
		help='The species/genome used (ex: hg38)'
		)

	parser.add_argument(
		'--redundancy_threshold',
		'-rt',
		required=False,
		type=int,
		default=1,
		help='The number of copies of indentical reads allowed in a library.\nDefault value is 1'
		)

	parser.add_argument(
		'--window_size',
		'-w',
		required=False,
		type=int,
		default=200,
		help='Resolution of RECOGNICERS.\nDefault value is 200 (bp)'
	)
	parser.add_argument(
		'--fragment_size',
		'-f',
		required=False,
		type=int,
		default=150,
		help='The amount of shift from the beginning of a read to the center of the DNA fragment represented by the read.\nDefault value is 150 (bp).'
		)

	parser.add_argument(
		'--effective_genome_fraction',
		'-egf',
		required=False,
		type=float,
		default=0.74,
		help='Effective genome as fraction of the genome size.\nDefault value is 0.74'
		)

	parser.add_argument(
	    '--false_discovery_rate',
	    '-fdr',
	    required=False,
	    default=0.01,
	    type=float,
	    help='''Remove all islands with an false_discovery_rate below cutoff.\nDefault value is 0.01.'''
	    )

	parser.add_argument(
		'--input_directory',
		'-i',
		required=False,
		default=curr_path,
		type=str,
		help='Path of the directory in which input files are located in. Not required when running SICER in the same directory as input files'
		)

	parser.add_argument(
		'--output_directory',
		'-o',
		required=False,
		default=curr_path,
		type=str,
		help='Path of the directory in which results will be stored.\nDefault path is the current path'
		)

	parser.add_argument(
		'--step_size',
		'-s_size',
		required=False,
		type=int,
		default=3,
		help='Step Size: the number of windows in one graining unit. Used for RECOGNICER algorithm '
	)

	parser.add_argument(
		'--step_score',
		'-s_score',
		required=False,
		type=int,
		default=2,
		help='Step Score: The minimum number of positive elements in the graining unit to call the unit positive. Used for RECOGNICER algorithm'
	)

def main():
	'''The main function/pipeline for SICER'''
	parser = argparse.ArgumentParser(description='Processing Arguments for SICER', formatter_class=RawTextHelpFormatter)

	sub_parsers = parser.add_subparsers(dest = 'subcommand')

	#Sub-parser for SICER algorithm
	sub_arg_SICER(sub_parsers)

	#Sub-parser for RECOGNICER algorithm
	sub_arg_RECOGNICER(sub_parsers)

	args = parser.parse_args()

	#check if valid subcommand has been entered
	if(args.subcommand!="SICER" and args.subcommand!="RECOGNICER"):
		sys.stderr.write("Error: no valid version of algorithm entered. Enter \"sicer SICER\" for original SICER algorithm or \"sicer RECOGNICER\" to use the RECOGNICER algorithm.\n")
		sys.exit(1)

	#Check if argument inputs are valid
	if (not os.path.exists(args.input_directory)):
		sys.stderr.write("Error: Invalid input directory\n")
		sys.exit(1)

	if(not(Utility.fileExists(os.path.join(args.input_directory,args.treatment_file)))):
		sys.stderr.write("Error: "+args.treatment_file+" file is not found.\n")
		sys.exit(1)

	if(args.control_file!=""):
		if(not(Utility.fileExists(os.path.join(args.input_directory,args.control_file)))):
			sys.stderr.write("Error: "+args.control_file+" file is not found.\n")
			sys.exit(1)

	if (not(args.species in GenomeData.species_chroms.keys())):
		sys.stderr.write("Error: Species "+args.species+" not recognized.\n")
		sys.exit(1)

	if(not(args.effective_genome_fraction<=1 and args.effective_genome_fraction>=0)):
		sys.stderr.write("Error: Effective genome fraction must be a value between 0 and 1.\n")
		sys.exit(1)

	if(args.subcommand=="SICER"):
		if(args.gap_size%args.window_size!=0):
			sys.stderr.write("Error: Gap size is not a multiple of window size.\n")
			sys.exit(1)

	if(args.subcommand=="RECOGNICER"):
		if(args.step_score>args.step_size):
			sys.stderr.write("Error: Cannot have the step score be larger than step size.\n")
			sys.exit(1)

	if not os.path.exists( args.output_directory ):
		try:
			os.makedirs( args.output_directory )
		except:
			sys.exit( "Output directory (%s) could not be created. Terminating program." % args.output_directory)


	'''Checks if the inputs files are in BAM format. If they are, convert them into BED format using bamToBed
	functionality from bedtools2 (https://github.com/arq5x/bedtools2). Therefore bedtools2 must be installed'''

	if(args.treatment_file.lower().endswith('.bam')):
		bed_file_name = args.treatment_file.replace('.bam','.bed')
		try:
			subprocess.call("bedtools bamtobed -i %s > %s" %(args.treatment_file,bed_file_name), shell=True)
			args.treatment_file = bed_file_name
		except:
			sys.exit("Cannot convert BAM file to BED file. Check if bedtools2 (https://github.com/arq5x/bedtools2) has been installed correctly")

	if(args.control_file!=''):
		if(args.control_file.lower().endswith('.bam')):
			bed_file_name = args.control_file.replace('.bam','.bed')
			bed_file_name = args.control_file.replace('.BAM','.bed') #check for capitalized extension name
			try:
				subprocess.call("bedtools bamtobed -i %s > %s" %(args.control_file,bed_file_name), shell=True)
				args.control_file = bed_file_name
			except:
				sys.exit("Cannot convert BAM file to BED file. Check if bedtools2 (https://github.com/arq5x/bedtools2) has been installed correctly")


	'''In this version of SICER, there are 2 different al> %sgorithms available for finding significant islands.
	The first one is the original SICER algorithm and the second one is RECOGNICER, which
	uses coarse-graining model identiy significant islands. "Version" argument determines which algorithm to run
	Whether to run SICER to identify differentially enriched regions or not is determined by the number of treatment
	libraries provided by the user.'''

	if(args.subcommand=="SICER"):
		print("Running SICER with given arguments \n")
		run_SICER.main(args)

	elif(args.subcommand=="RECOGNICER"):
		print("Running RECOGNICER with given arguments \n")
		run_RECOGNICER.main(args)

	print("\nProgram Finished Running")


if __name__ == '__main__':
	main()
