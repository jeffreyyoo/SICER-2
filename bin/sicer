#!/usr/bin/env python

import os
import sys
dir_path = os.getcwd()

import argparse
from argparse import RawTextHelpFormatter

#Imports from SICER package
from sicer.main import run_SICER
from sicer.main import run_SICER_df
from sicer.lib import Utility, GenomeData

def main():
	parser = argparse.ArgumentParser(description='Processing Arguments for SICER', formatter_class=RawTextHelpFormatter)

	parser.add_argument(
		'--version',
		'-v',
		required=True,
		type=int,
		help='''Select the version of SICER you wish to run: \nENTER \"0\" for SICER\nENTER \"1\" for RECOGNICER'''
		)

	parser.add_argument(
	    '--treatment_file',
	    '-t',
	    required=True,
	    nargs='+',
	    type=str,
	    help='''Name of the sample file you wish to run SICER on. Must be in BED or BAM format.'''
	    )

	parser.add_argument(
	    '--control_file',
	    '-c',
	    required=False,
	    nargs='+',
	    type=str,
	    help='''Name of the control library in BED or BAM format. \nIf you wish to run SICER without a control library, simply do not enter the file. '''
	    )

	parser.add_argument(
		'--species',
		'-s',
		required=True,
		type=str,
		help='The species/genome used (ex: hg38)'
		)

	parser.add_argument(
		'--redundancy_threshold',
		'-rt',
		required=False,
		type=int,
		default=1,
		help='The number of copies of indentical reads allowed in a library.\nDefault value is 1'
		)

	parser.add_argument(
		'--window_size',
		'-w',
		required=False,
		type=int,
		default=200,
		help='Resolution of SICER.\nDefault value is 200 (bp)'
	)
	parser.add_argument(
		'--fragment_size',
		'-f',
		required=False,
		type=int,
		default=150,
		help='The amount of shift from the beginning of a read to the center of the DNA fragment represented by the read.\nDefault value is 150 (bp).'
		)

	parser.add_argument(
		'--effective_genome_fraction',
		'-egf',
		required=False,
		type=float,
		default=0.74,
		help='Effective genome as fraction of the genome size.\nDefault value is 0.74'
		)

	parser.add_argument(
		'--gap_size',
		'-g',
		required=False,
		type=int,
		default=600,
		help='The minimum length of a \"gap\" such that neighboring window is an \"island.\"\nThis value must be a multiple of the window size.\nDefault value is 600 (bp)'''
		)

	parser.add_argument(
	    '--false_discovery_rate',
	    '-fdr',
	    required=False,
	    default=0.01,
	    type=float,
	    help='''Remove all islands with an false_discovery_rate below cutoff.\nDefault value is 0.01.'''
	    )

	parser.add_argument(
		'--false_discovery_rate_df',
		'-fdr_df',
		required=False,
		default=0.01,
		type=float,
		help='Cutoff for identification of significant changes been wild-type library and knockout library.\nOnly provide a value when comparing two libraries.'
	)

	parser.add_argument(
		'--e_value',
		'-e',
		required=False,
		type=int,
		default=1000,
		help='E-value. Requires user input when no control library is provided.\nDefault value is 1000'
		)

	parser.add_argument(
		'--output_directory',
		'-o',
		required=False,
		default=dir_path,
		type=str,
		help='Path of the directory in which results will be stored.\nDefault path is the current path'
		)

	args = parser.parse_args()

	#Check if argument inputs are valid
	if(len(args.treatment_file)>2):
		sys.stderr.write("Error: Too many treatment file inputs. SICER accepts at max two files.")
		sys.exit(1)
	if(len(args.control_file)>2):
		sys.stderr.write("Error: Too many control file inputs. SICER accepts at max two files.")
		sys.exit(1)

	#User cannot input 2 treatment libraries and only 1 control library
	if(len(args.treatment_file)==2 and len(args.control_file)%2==1):
		sys.stderr.write("Error: Mismatch between the number of treatment file inputs and control file inputs.")

	for file in args.treatment_file:
		if(not(Utility.fileExists(file))):
			sys.stderr.write("Error: "+file+" file is not found.\n")
			sys.exit(1)

	if(len(args.control_file)>0):
		for file in args.control_file:
			if(not(Utility.fileExists(file))):
				sys.stderr.write("Error: "+file+" file is not found.\n")
				sys.exit(1)

	if (not(args.species in GenomeData.species_chroms.keys())):
		sys.stderr.write("Error: Species "+args.species+" not recognized.\n")
		sys.exit(1)

	if(not(args.effective_genome_fraction<=1 and args.effective_genome_fraction>=0)):
		sys.stderr.write("Error: Effective genome fraction must be a value between 0 and 1.\n")
		sys.exit(1)

	if(args.gap_size%args.window_size!=0):
		sys.stderr.write("Error: Gap size is not a multiple of window size.\n")
		sys.exit(1)

	if(not(os.path.isdir(args.output_directory))):
		sys.stderr.write("Error: output directory is not a valid directory.\n")
		sys.exit(1)


	'''In this version of SICER, there are 2 different algorithms available for finding significant islands.
	The first one is the original SICER algorithm and the second one is RECOGNICER, which
	uses coarse-graining model identiy significant islands. "Version" argument determines which algorithm to run
	Whether to run SICER to identify differentially enriched regions or not is determined by the number of treatment
	libraries provided by the user.'''

	if(args.version==0):
		if(len(args.treatment_file)>1):
			print("Running SICER-DF with given arguments \n")
			run_SICER_df.main(args)
		else:
			print("Running SICER with given arguments \n")
			run_SICER.main(args)

	elif(args.version==1):
		if(len(args.treatment_file)>1):
			print("Running RECOGNICER with given arguments \n")
			#run_RECOGNICER_df(args)
		else:
			print("Running RECOGNICER with given arguments \n")
			#run_RECOGNICER(args)

	print("\nProgram Finished Running")


if __name__ == '__main__':
	main()
